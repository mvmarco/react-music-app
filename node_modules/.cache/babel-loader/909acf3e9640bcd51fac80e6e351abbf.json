{"ast":null,"code":"import _regeneratorRuntime from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useRef}from\"react\";// import components\nimport Song from\"./components/Song.js\";import Player from\"./components/Player.js\";import Library from\"./components/Library.js\";import Nav from\"./components/Nav\";// import styles\nimport\"./styles/app.scss\";// import data.js\nimport data from\"./data.js\";/* \n  by default the first song of the array will be the first one to be played because of:\n  const [currentSong, setcurrentSong] = useState(songs[0]);\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// ref\nvar audioRef=useRef(null);// state\nvar _useState=useState(data()),_useState2=_slicedToArray(_useState,2),songs=_useState2[0],setSongs=_useState2[1];var _useState3=useState(songs[0]),_useState4=_slicedToArray(_useState3,2),currentSong=_useState4[0],setcurrentSong=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isPlaying=_useState6[0],setisPlaying=_useState6[1];var _useState7=useState({currentTime:0,duration:0,animationPertantage:0}),_useState8=_slicedToArray(_useState7,2),songInfo=_useState8[0],setsongInfo=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),libraryStatus=_useState10[0],setLibraryStatus=_useState10[1];// events callbacks\nvar timeUpdateHandler=function timeUpdateHandler(e){// from this event we can extract: the current time we are in the song and also the song duration\nconsole.log(e);var currentTime=e.target.currentTime;var duration=e.target.duration;console.log(currentTime,duration);// calculate percentage\nvar roundedCurrent=Math.round(currentTime);var roundedDuration=Math.round(duration);var animation=Math.round(roundedCurrent/roundedDuration*100);console.log('check here',roundedCurrent,roundedDuration,animation);setsongInfo(_objectSpread(_objectSpread({},songInfo),{},{currentTime:currentTime,duration:duration,animationPertantage:animation}));};var songEndHandler=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var currentIndex;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:currentIndex=songs.findIndex(function(song){return song.id===currentSong.id;});_context.next=3;return setcurrentSong(songs[currentIndex-1]||songs[songs.length-1]);case 3:if(isPlaying)audioRef.current.play();case 4:case\"end\":return _context.stop();}}},_callee);}));return function songEndHandler(){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"App \".concat(libraryStatus?'library-active':\"\"),children:[/*#__PURE__*/_jsx(Nav,{setLibraryStatus:setLibraryStatus,libraryStatus:libraryStatus}),/*#__PURE__*/_jsx(Song,{currentSong:currentSong,isPlaying:isPlaying}),/*#__PURE__*/_jsx(Player,{audioRef:audioRef,currentSong:currentSong,setcurrentSong:setcurrentSong,isPlaying:isPlaying,setisPlaying:setisPlaying,setsongInfo:setsongInfo,songInfo:songInfo,songs:songs,setSongs:setSongs}),/*#__PURE__*/_jsx(Library,{songs:songs,setcurrentSong:setcurrentSong,audioRef:audioRef,isPlaying:isPlaying,setsongInfo:setsongInfo,setSongs:setSongs,libraryStatus:libraryStatus}),/*#__PURE__*/_jsx(\"audio\",{onTimeUpdate:timeUpdateHandler,onLoadedMetadata:timeUpdateHandler,ref:audioRef,src:currentSong.audio,onEnded:songEndHandler})]});}export default App;","map":{"version":3,"sources":["/home/mvmarco/code/mvmarco/react-music-app/src/App.js"],"names":["useState","useRef","Song","Player","Library","Nav","data","App","audioRef","songs","setSongs","currentSong","setcurrentSong","isPlaying","setisPlaying","currentTime","duration","animationPertantage","songInfo","setsongInfo","libraryStatus","setLibraryStatus","timeUpdateHandler","e","console","log","target","roundedCurrent","Math","round","roundedDuration","animation","songEndHandler","currentIndex","findIndex","song","id","length","current","play","audio"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\n// import components\nimport Song from \"./components/Song.js\"\nimport Player from \"./components/Player.js\"\nimport Library from \"./components/Library.js\";\nimport Nav from \"./components/Nav\"\n// import styles\nimport \"./styles/app.scss\";\n// import data.js\nimport data from \"./data.js\";\n\n/* \n  by default the first song of the array will be the first one to be played because of:\n  const [currentSong, setcurrentSong] = useState(songs[0]);\n*/\n\nfunction App() {\n  // ref\n  const audioRef = useRef(null);\n  // state\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setcurrentSong] = useState(songs[0]);\n  const [isPlaying, setisPlaying] = useState(false);\n  const [songInfo, setsongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPertantage: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false)\n  // events callbacks\n  const timeUpdateHandler = (e) => {\n    // from this event we can extract: the current time we are in the song and also the song duration\n    console.log(e);\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    console.log(currentTime, duration);\n    // calculate percentage\n    const roundedCurrent = Math.round(currentTime)\n    const roundedDuration = Math.round(duration)\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    console.log('check here', roundedCurrent,roundedDuration, animation);\n    setsongInfo({ ...songInfo, currentTime: currentTime, duration: duration, animationPertantage: animation });\n  };\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setcurrentSong(songs[currentIndex - 1] || songs[songs.length - 1]);\n    if(isPlaying) audioRef.current.play();\n  }\n  return (\n    <div className={`App ${libraryStatus ? 'library-active' : \"\"}`}>\n      <Nav setLibraryStatus={setLibraryStatus} libraryStatus={libraryStatus} />\n      <Song currentSong={currentSong} isPlaying={isPlaying} />\n      <Player\n        audioRef={audioRef}\n        currentSong={currentSong}\n        setcurrentSong={setcurrentSong}\n        isPlaying={isPlaying}\n        setisPlaying={setisPlaying}\n        setsongInfo={setsongInfo}\n        songInfo={songInfo}\n        songs={songs}\n        setSongs={setSongs}\n      />\n      <Library\n        songs={songs}\n        setcurrentSong={setcurrentSong}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setsongInfo={setsongInfo}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}