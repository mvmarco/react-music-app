{"ast":null,"code":"import _regeneratorRuntime from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LibrarySong=function LibrarySong(_ref){var songs=_ref.songs,song=_ref.song,setcurrentSong=_ref.setcurrentSong,audioRef=_ref.audioRef,isPlaying=_ref.isPlaying,setSongs=_ref.setSongs;var songSelectHandler=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var selectedSong,newSongs;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:selectedSong=song;// we use awai tbecause the audio is on App.js\n_context.next=3;return setcurrentSong(selectedSong);case 3:console.log(selectedSong);// add active state\n/* \n      other than changing the song clicked as current song, we want to change the status\n      to active:true for the current song and active:false for the others\n\n      you can either take \"selectedSong\" which is the current song clicked and compare it\n      with the \"song\" of the new mapped array (newSongs), if it is equal, we change the \n      status (active true/false) and then we update the state with setSongs(newSongs);\n      \n      or we can take the song.id of the new mapped array (newSongs) compared to the id (which is the \n      id of the current song clicked) for this approach, put id in props\n\n      PS: we do spread because song is an object, and we change the active status property\n      Now all the songs that are not the current are false while the current is true\n    */newSongs=songs.map(function(song){if(selectedSong===song){return _objectSpread(_objectSpread({},song),{},{active:true});}else{return _objectSpread(_objectSpread({},song),{},{active:false});}});setSongs(newSongs);// then we update the currentSong, the state, with what we just selected\nsetcurrentSong(selectedSong);// check if the song is playing\nif(isPlaying){audioRef.current.play();}case 8:case\"end\":return _context.stop();}}},_callee);}));return function songSelectHandler(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{onClick:songSelectHandler,className:\"library-song \".concat(song.active?'selected':\"\"),children:[/*#__PURE__*/_jsx(\"img\",{src:song.cover,alt:song.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"song-description\",children:[/*#__PURE__*/_jsx(\"h3\",{children:song.name}),/*#__PURE__*/_jsx(\"h4\",{children:song.artist})]})]});};export default LibrarySong;","map":{"version":3,"sources":["/home/mvmarco/code/mvmarco/react-music-app/src/components/LibrarySong.js"],"names":["LibrarySong","songs","song","setcurrentSong","audioRef","isPlaying","setSongs","songSelectHandler","selectedSong","console","log","newSongs","map","active","current","play","cover","name","artist"],"mappings":"2cAAA,GAAMA,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAkE,IAAhEC,CAAAA,KAAgE,MAAhEA,KAAgE,CAAzDC,IAAyD,MAAzDA,IAAyD,CAAnDC,cAAmD,MAAnDA,cAAmD,CAAnCC,QAAmC,MAAnCA,QAAmC,CAAzBC,SAAyB,MAAzBA,SAAyB,CAAdC,QAAc,MAAdA,QAAc,CAEpF,GAAMC,CAAAA,iBAAiB,2FAAG,6JAClBC,YADkB,CACHN,IADG,CAExB;AAFwB,sBAGlBC,CAAAA,cAAc,CAACK,YAAD,CAHI,QAIxBC,OAAO,CAACC,GAAR,CAAYF,YAAZ,EACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MACUG,QApBkB,CAoBPV,KAAK,CAACW,GAAN,CAAU,SAACV,IAAD,CAAU,CACnC,GAAIM,YAAY,GAAKN,IAArB,CAA2B,CACzB,sCACKA,IADL,MAEEW,MAAM,CAAE,IAFV,GAID,CALD,IAKO,CACL,sCACKX,IADL,MAEEW,MAAM,CAAE,KAFV,GAID,CACF,CAZgB,CApBO,CAiCxBP,QAAQ,CAACK,QAAD,CAAR,CACA;AACAR,cAAc,CAACK,YAAD,CAAd,CACA;AACA,GAAIH,SAAJ,CAAe,CACbD,QAAQ,CAACU,OAAT,CAAiBC,IAAjB,GACD,CAvCuB,sDAAH,kBAAjBR,CAAAA,iBAAiB,2CAAvB,CAyCA,mBACE,aAAK,OAAO,CAAEA,iBAAd,CAAiC,SAAS,wBAAkBL,IAAI,CAACW,MAAL,CAAc,UAAd,CAA2B,EAA7C,CAA1C,wBACE,YAAK,GAAG,CAAEX,IAAI,CAACc,KAAf,CAAsB,GAAG,CAAEd,IAAI,CAACe,IAAhC,EADF,cAEE,aAAK,SAAS,CAAC,kBAAf,wBACE,oBAAKf,IAAI,CAACe,IAAV,EADF,cAEE,oBAAKf,IAAI,CAACgB,MAAV,EAFF,GAFF,GADF,CASD,CApDD,CAsDA,cAAelB,CAAAA,WAAf","sourcesContent":["const LibrarySong = ({songs, song, setcurrentSong, audioRef, isPlaying, setSongs}) => {\n\n  const songSelectHandler = async () => {\n    const selectedSong = song;\n    // we use awai tbecause the audio is on App.js\n    await setcurrentSong(selectedSong);\n    console.log(selectedSong);\n    // add active state\n    /* \n      other than changing the song clicked as current song, we want to change the status\n      to active:true for the current song and active:false for the others\n\n      you can either take \"selectedSong\" which is the current song clicked and compare it\n      with the \"song\" of the new mapped array (newSongs), if it is equal, we change the \n      status (active true/false) and then we update the state with setSongs(newSongs);\n      \n      or we can take the song.id of the new mapped array (newSongs) compared to the id (which is the \n      id of the current song clicked) for this approach, put id in props\n\n      PS: we do spread because song is an object, and we change the active status property\n      Now all the songs that are not the current are false while the current is true\n    */\n    const newSongs = songs.map((song) => {\n      if (selectedSong === song) {\n        return {\n          ...song,\n          active: true,\n        };\n      } else {\n        return {\n          ...song,\n          active: false,\n        };\n      }\n    });\n    setSongs(newSongs);\n    // then we update the currentSong, the state, with what we just selected\n    setcurrentSong(selectedSong);\n    // check if the song is playing\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n  return (\n    <div onClick={songSelectHandler} className={`library-song ${song.active ? 'selected' : \"\"}`}>\n      <img src={song.cover} alt={song.name} />\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n"]},"metadata":{},"sourceType":"module"}