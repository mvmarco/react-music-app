{"ast":null,"code":"var _jsxFileName = \"/home/mvmarco/code/mvmarco/react-music-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\"; // import components\n\nimport Song from \"./components/Song.js\";\nimport Player from \"./components/Player.js\";\nimport Library from \"./components/Library.js\";\nimport Nav from \"./components/Nav\"; // import styles\n\nimport \"./styles/app.scss\"; // import data.js\n\nimport data from \"./data.js\";\n/* \n  by default the first song of the array will be the first one to be played because of:\n  const [currentSong, setcurrentSong] = useState(songs[0]);\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // ref\n  const audioRef = useRef(null); // state\n\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setcurrentSong] = useState(songs[0]);\n  const [isPlaying, setisPlaying] = useState(false);\n  const [songInfo, setsongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPertantage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false); // events callbacks\n\n  const timeUpdateHandler = e => {\n    // from this event we can extract: the current time we are in the song and also the song duration\n    console.log(e);\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    console.log(currentTime, duration); // calculate percentage\n\n    const roundedCurrent = Math.round(currentTime);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    console.log('check here', roundedCurrent, roundedDuration, animation);\n    setsongInfo({ ...songInfo,\n      currentTime: currentTime,\n      duration: duration,\n      animationPertantage: animation\n    });\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setcurrentSong(songs[currentIndex - 1] || songs[songs.length - 1]);\n    if (isPlaying) audioRef.current.play();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${libraryStatus ? 'library-active' : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      setLibraryStatus: setLibraryStatus,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      currentSong: currentSong,\n      setcurrentSong: setcurrentSong,\n      isPlaying: isPlaying,\n      setisPlaying: setisPlaying,\n      setsongInfo: setsongInfo,\n      songInfo: songInfo,\n      songs: songs,\n      setSongs: setSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setcurrentSong: setcurrentSong,\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setsongInfo: setsongInfo,\n      setSongs: setSongs,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio,\n      onEnded: songEndHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Ig9C7jUtbQzudPMhYvcARPTKjp4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mvmarco/code/mvmarco/react-music-app/src/App.js"],"names":["useState","useRef","Song","Player","Library","Nav","data","App","audioRef","songs","setSongs","currentSong","setcurrentSong","isPlaying","setisPlaying","songInfo","setsongInfo","currentTime","duration","animationPertantage","libraryStatus","setLibraryStatus","timeUpdateHandler","e","console","log","target","roundedCurrent","Math","round","roundedDuration","animation","songEndHandler","currentIndex","findIndex","song","id","length","current","play","audio"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\n// import components\nimport Song from \"./components/Song.js\"\nimport Player from \"./components/Player.js\"\nimport Library from \"./components/Library.js\";\nimport Nav from \"./components/Nav\"\n// import styles\nimport \"./styles/app.scss\";\n// import data.js\nimport data from \"./data.js\";\n\n/* \n  by default the first song of the array will be the first one to be played because of:\n  const [currentSong, setcurrentSong] = useState(songs[0]);\n*/\n\nfunction App() {\n  // ref\n  const audioRef = useRef(null);\n  // state\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setcurrentSong] = useState(songs[0]);\n  const [isPlaying, setisPlaying] = useState(false);\n  const [songInfo, setsongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPertantage: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false)\n  // events callbacks\n  const timeUpdateHandler = (e) => {\n    // from this event we can extract: the current time we are in the song and also the song duration\n    console.log(e);\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    console.log(currentTime, duration);\n    // calculate percentage\n    const roundedCurrent = Math.round(currentTime)\n    const roundedDuration = Math.round(duration)\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    console.log('check here', roundedCurrent,roundedDuration, animation);\n    setsongInfo({ ...songInfo, currentTime: currentTime, duration: duration, animationPertantage: animation });\n  };\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setcurrentSong(songs[currentIndex - 1] || songs[songs.length - 1]);\n    if(isPlaying) audioRef.current.play();\n  }\n  return (\n    <div className={`App ${libraryStatus ? 'library-active' : \"\"}`}>\n      <Nav setLibraryStatus={setLibraryStatus} libraryStatus={libraryStatus} />\n      <Song currentSong={currentSong} isPlaying={isPlaying} />\n      <Player\n        audioRef={audioRef}\n        currentSong={currentSong}\n        setcurrentSong={setcurrentSong}\n        isPlaying={isPlaying}\n        setisPlaying={setisPlaying}\n        setsongInfo={setsongInfo}\n        songInfo={songInfo}\n        songs={songs}\n        setSongs={setSongs}\n      />\n      <Library\n        songs={songs}\n        setcurrentSong={setcurrentSong}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setsongInfo={setsongInfo}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}