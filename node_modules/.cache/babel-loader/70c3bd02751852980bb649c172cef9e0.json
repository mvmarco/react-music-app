{"ast":null,"code":"import _regeneratorRuntime from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/home/mvmarco/code/mvmarco/react-music-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/*   \n  \"useRef\" is a way of connecting to the elements without doing: document.querySelector(\"audio\")\n  it is a way to grab something using react.\n  So you can create a const with a null initial value, as below:\n  const audioRef = useRef(null)\n  then we pass it as a prop in our <audio> element\n\n  The event callback, use audioRef.current (which is one of the key of the audio object) and\n  calls a pre-existing function on audio called play();\n  audioRef.current.play();\n */ // ####################################\n// ERROR: CONTROLLED AND UNCONTROLLED\n// ####################################\n/* \n    error: a component is changing an uncontrolled input of index.js type range to be controlled.\n    Input elements should not switch from uncontrolled to controlled (or vice versa).\n\n    Uncontrolled means that our input value is not associated to a state, so when the data changes\n    associated to a state the input is still asociated to the input itself and not the react state \n    input. Once you associate the input value to the state, the component becomes controlled.\n\n    1. uncontrolled component: input that has nothing to do with a state\n    2. controlled component: value of the input is associated to  \n\n    we got the error because, that mess up with the states:\n    currentTime: 0,\n    duration: 0,\n\n    was set to null:\n    currentTime: null,\n    duration: null,\n  */import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faPlay,faAngleLeft,faAngleRight,faPause}from'@fortawesome/free-solid-svg-icons';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Player=function Player(_ref){var isPlaying=_ref.isPlaying,setisPlaying=_ref.setisPlaying,audioRef=_ref.audioRef,setsongInfo=_ref.setsongInfo,songInfo=_ref.songInfo,songs=_ref.songs,currentSong=_ref.currentSong,setcurrentSong=_ref.setcurrentSong,setSongs=_ref.setSongs;// Ref,  it is moved to App. so we can use it to LibrarySong.js when you click the song there, it plays\n// const audioRef = useRef(null);\n// state I am gonna use only here: timing, moved to the app\n/*\n    const [songInfo, setsongInfo] = useState({\n      currentTime: 0,\n      duration: 0,\n    });\n   */ /*\n    // REMOVED IT BECAUSE IT IS DOUBLE ON THE LIBRARYSONG\n    // UseEffect\n    // when you skip song also the library song gets updated\n    useEffect(() => {\n      const newSongs = songs.map((song) => {\n        if (currentSong.id === song.id) {\n          return {\n            ...song,\n            active: true,\n          };\n        } else {\n          return {\n            ...song,\n            active: false,\n          };\n        }\n      });\n      setSongs(newSongs);\n    }, [currentSong]);\n    // run this function all the time the current song is updated.\n    // basically when the current song changes, the status is active, and active status = hover LibrarySong\n */var activeLibraryHandler=function activeLibraryHandler(nextPrev){var newSongs=songs.map(function(song){if(currentSong.id===nextPrev.id){return _objectSpread(_objectSpread({},song),{},{active:true});}else{return _objectSpread(_objectSpread({},song),{},{active:false});}});setSongs(newSongs);};// Event Handlers\nvar playSongHandler=function playSongHandler(){console.log(audioRef);if(isPlaying){audioRef.current.pause();setisPlaying(!isPlaying);}else{audioRef.current.play();setisPlaying(!isPlaying);}};// this is connected to the onTimeUpdate event. Which let us update values in real time\n// this is connected to onLoadedMetadata, when the pages loads the info updated\n// moved to the App\n/*   const timeUpdateHandler = (e) => {\n    // from this event we can extract: the current time we are in the song and also the song duration\n    console.log(e);\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    console.log(currentTime, duration);\n    setsongInfo({...songInfo, currentTime: currentTime, duration: duration })\n  } */ // onChange is the event for this callback to move the input range\nvar dragHandler=function dragHandler(e){audioRef.current.currentTime=e.target.value;console.log(e.target.value);setsongInfo(_objectSpread(_objectSpread({},songInfo),{},{currentTime:e.target.value}));};// function for formatting the time, using a stackOverflow formatting\nfunction formatTime(time){return Math.floor(time/60)+\":\"+(\"0\"+Math.floor(time%60)).slice(-2);}var skipTrackHandler=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(direction){var currentIndex;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// get the index of the current song\ncurrentIndex=songs.findIndex(function(song){return song.id===currentSong.id;});// if the class is equal to skip-forward the change the current song, using index +1\n// but to prevent the last song to skip to nothing we need to add the \"modules\" %\n// if 8 % 8 is equal to 0, 0 will be our index, so it starts again from the beginning\n/* \n      if 2 % 8 is equal to 2, 2 will be the index. \n      It's really supper easy to figure out the results of modulo when the first number is smaller. \n      The result is always equal the the first (smaller) number.\n      Because the second number is larger, it 'goes into' the first number zero times and the remainder \n      is the entirety of this first number.\n\n      if you wanna go back, and the index is 0 you cannot go index -1. Because index -1 does not exist.\n      so we need to make a ternary where if the current index is 0 you take the song.length -1\n      and get index 7. If you are not at current index 9 you can just go back currentIndex - 1\n      we need to return it either one of the two ifs and update the \n\n    */if(!(direction===\"skip-forward\")){_context.next=7;break;}_context.next=4;return setcurrentSong(songs[(currentIndex+1)%songs.length]);case 4:activeLibraryHandler(songs[(currentIndex+1)%songs.length]);_context.next=11;break;case 7:if(!(direction===\"skip-back\")){_context.next=11;break;}_context.next=10;return setcurrentSong(songs[currentIndex-1]||songs[songs.length-1]);case 10:activeLibraryHandler(songs[currentIndex-1]||songs[songs.length-1]);case 11:// this line waits for the songs to load before we can actually play them\nif(isPlaying){audioRef.current.play();}case 12:case\"end\":return _context.stop();}}},_callee);}));return function skipTrackHandler(_x){return _ref2.apply(this,arguments);};}();var trackAnim={transform:\"translateX(\".concat(songInfo.animationPertantage,\"%)\")};return/*#__PURE__*/_jsxs(\"div\",{className:\"player-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"time-control\",children:[/*#__PURE__*/_jsx(\"p\",{style:{width:\"4ch\",boxSizing:\"content-box\"},children:formatTime(songInfo.currentTime)}),/*#__PURE__*/_jsxs(\"div\",{style:{background:\"linear-gradient(to right, \".concat(currentSong.color[0],\",\").concat(currentSong.color[1],\")\")},className:\"track\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"range\",value:songInfo.currentTime,min:0,max:songInfo.duration||0,onChange:dragHandler}),/*#__PURE__*/_jsx(\"div\",{style:trackAnim,className:\"animate-track\"})]}),/*#__PURE__*/_jsx(\"p\",{children:songInfo.duration?formatTime(songInfo.duration):\"0:00\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"player-control\",children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{onClick:function onClick(){return skipTrackHandler(\"skip-back\");},className:\"skip-back\",size:\"2x\",icon:faAngleLeft}),/*#__PURE__*/_jsx(FontAwesomeIcon,{onClick:playSongHandler,className:\"play\",size:\"2x\",icon:isPlaying?faPause:faPlay}),/*#__PURE__*/_jsx(FontAwesomeIcon,{onClick:function onClick(){return skipTrackHandler(\"skip-forward\");},className:\"skip-forward\",size:\"2x\",icon:faAngleRight})]})]});};export default Player;","map":{"version":3,"sources":["/home/mvmarco/code/mvmarco/react-music-app/src/components/Player.js"],"names":["FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","isPlaying","setisPlaying","audioRef","setsongInfo","songInfo","songs","currentSong","setcurrentSong","setSongs","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","playSongHandler","console","log","current","pause","play","dragHandler","e","currentTime","target","value","formatTime","time","Math","floor","slice","skipTrackHandler","direction","currentIndex","findIndex","length","trackAnim","transform","animationPertantage","width","boxSizing","background","color","duration"],"mappings":"mXAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,CAGE;AACA;AACA;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAEA,OAASA,eAAT,KAAgC,gCAAhC,CACA,OACEC,MADF,CAEEC,WAFF,CAGEC,YAHF,CAIEC,OAJF,KAKO,mCALP,C,wFAOA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAUT,IATJC,CAAAA,SASI,MATJA,SASI,CARJC,YAQI,MARJA,YAQI,CAPJC,QAOI,MAPJA,QAOI,CANJC,WAMI,MANJA,WAMI,CALJC,QAKI,MALJA,QAKI,CAJJC,KAII,MAJJA,KAII,CAHJC,WAGI,MAHJA,WAGI,CAFJC,cAEI,MAFJA,cAEI,CADJC,QACI,MADJA,QACI,CACJ;AACA;AAEA;AACA;AACF;AACA;AACA;AACA;AACA,KAVM,CAYJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACE,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,QAAD,CAAc,CACzC,GAAMC,CAAAA,QAAQ,CAAGN,KAAK,CAACO,GAAN,CAAU,SAACC,IAAD,CAAU,CACnC,GAAIP,WAAW,CAACQ,EAAZ,GAAmBJ,QAAQ,CAACI,EAAhC,CAAoC,CAClC,sCACGD,IADH,MAEAE,MAAM,CAAE,IAFR,GAID,CALD,IAKO,CACL,sCACGF,IADH,MAEAE,MAAM,CAAE,KAFR,GAID,CACF,CAZgB,CAAjB,CAaAP,QAAQ,CAACG,QAAD,CAAR,CACD,CAfD,CAgBA;AACA,GAAMK,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5BC,OAAO,CAACC,GAAR,CAAYhB,QAAZ,EACA,GAAIF,SAAJ,CAAe,CACbE,QAAQ,CAACiB,OAAT,CAAiBC,KAAjB,GACAnB,YAAY,CAAC,CAACD,SAAF,CAAZ,CACD,CAHD,IAGO,CACLE,QAAQ,CAACiB,OAAT,CAAiBE,IAAjB,GACApB,YAAY,CAAC,CAACD,SAAF,CAAZ,CACD,CACF,CATD,CAWA;AACA;AACA;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAzEM,CA2EJ;AACA,GAAMsB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,CAAD,CAAO,CACzBrB,QAAQ,CAACiB,OAAT,CAAiBK,WAAjB,CAA+BD,CAAC,CAACE,MAAF,CAASC,KAAxC,CACAT,OAAO,CAACC,GAAR,CAAYK,CAAC,CAACE,MAAF,CAASC,KAArB,EACAvB,WAAW,gCAAMC,QAAN,MAAgBoB,WAAW,CAAED,CAAC,CAACE,MAAF,CAASC,KAAtC,GAAX,CACD,CAJD,CAKA;AACA,QAASC,CAAAA,UAAT,CAAoBC,IAApB,CAA0B,CACxB,MACEC,CAAAA,IAAI,CAACC,KAAL,CAAWF,IAAI,CAAG,EAAlB,EAAwB,GAAxB,CAA8B,CAAC,IAAMC,IAAI,CAACC,KAAL,CAAWF,IAAI,CAAG,EAAlB,CAAP,EAA8BG,KAA9B,CAAoC,CAAC,CAArC,CADhC,CAGD,CAED,GAAMC,CAAAA,gBAAgB,2FAAG,iBAAOC,SAAP,mIACvB;AACIC,YAFmB,CAEJ7B,KAAK,CAAC8B,SAAN,CAAgB,SAACtB,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYR,WAAW,CAACQ,EAAlC,EAAhB,CAFI,CAGvB;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAlB2B,KAmBnBmB,SAAS,GAAK,cAnBK,gDAoBhB1B,CAAAA,cAAc,CAACF,KAAK,CAAC,CAAC6B,YAAY,CAAG,CAAhB,EAAqB7B,KAAK,CAAC+B,MAA5B,CAAN,CApBE,QAqBtB3B,oBAAoB,CAACJ,KAAK,CAAC,CAAC6B,YAAY,CAAG,CAAhB,EAAqB7B,KAAK,CAAC+B,MAA5B,CAAN,CAApB,CArBsB,mCAsBZH,SAAS,GAAK,WAtBF,kDAuBf1B,CAAAA,cAAc,CAACF,KAAK,CAAC6B,YAAY,CAAG,CAAhB,CAAL,EAA2B7B,KAAK,CAACA,KAAK,CAAC+B,MAAN,CAAe,CAAhB,CAAjC,CAvBC,SAwBrB3B,oBAAoB,CAACJ,KAAK,CAAC6B,YAAY,CAAG,CAAhB,CAAL,EAA2B7B,KAAK,CAACA,KAAK,CAAC+B,MAAN,CAAe,CAAhB,CAAjC,CAApB,CAxBqB,QA0BvB;AACA,GAAIpC,SAAJ,CAAe,CACbE,QAAQ,CAACiB,OAAT,CAAiBE,IAAjB,GACD,CA7BsB,uDAAH,kBAAhBW,CAAAA,gBAAgB,6CAAtB,CA+BA,GAAMK,CAAAA,SAAS,CAAG,CAChBC,SAAS,sBAAgBlC,QAAQ,CAACmC,mBAAzB,MADO,CAAlB,CAGA,mBACE,aAAK,SAAS,CAAC,kBAAf,wBACE,aAAK,SAAS,CAAC,cAAf,wBACE,UAAG,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAT,CAAgBC,SAAS,CAAE,aAA3B,CAAV,UACGd,UAAU,CAACvB,QAAQ,CAACoB,WAAV,CADb,EADF,cAIE,aACE,KAAK,CAAE,CACLkB,UAAU,qCAA+BpC,WAAW,CAACqC,KAAZ,CAAkB,CAAlB,CAA/B,aAAuDrC,WAAW,CAACqC,KAAZ,CAAkB,CAAlB,CAAvD,KADL,CADT,CAIE,SAAS,CAAC,OAJZ,wBAME,cACE,IAAI,CAAC,OADP,CAEE,KAAK,CAAEvC,QAAQ,CAACoB,WAFlB,CAGE,GAAG,CAAE,CAHP,CAIE,GAAG,CAAEpB,QAAQ,CAACwC,QAAT,EAAqB,CAJ5B,CAKE,QAAQ,CAAEtB,WALZ,EANF,cAaE,YAAK,KAAK,CAAEe,SAAZ,CAAuB,SAAS,CAAC,eAAjC,EAbF,GAJF,cAmBE,mBACGjC,QAAQ,CAACwC,QAAT,CAAoBjB,UAAU,CAACvB,QAAQ,CAACwC,QAAV,CAA9B,CAAoD,MADvD,EAnBF,GADF,cAyBE,aAAK,SAAS,CAAC,gBAAf,wBACE,KAAC,eAAD,EACE,OAAO,CAAE,yBAAMZ,CAAAA,gBAAgB,CAAC,WAAD,CAAtB,EADX,CAEE,SAAS,CAAC,WAFZ,CAGE,IAAI,CAAC,IAHP,CAIE,IAAI,CAAEpC,WAJR,EADF,cAOE,KAAC,eAAD,EACE,OAAO,CAAEoB,eADX,CAEE,SAAS,CAAC,MAFZ,CAGE,IAAI,CAAC,IAHP,CAIE,IAAI,CAAEhB,SAAS,CAAGF,OAAH,CAAaH,MAJ9B,EAPF,cAaE,KAAC,eAAD,EACE,OAAO,CAAE,yBAAMqC,CAAAA,gBAAgB,CAAC,cAAD,CAAtB,EADX,CAEE,SAAS,CAAC,cAFZ,CAGE,IAAI,CAAC,IAHP,CAIE,IAAI,CAAEnC,YAJR,EAbF,GAzBF,GADF,CAgDD,CApLD,CAsLA,cAAeE,CAAAA,MAAf","sourcesContent":["/*   \n  \"useRef\" is a way of connecting to the elements without doing: document.querySelector(\"audio\")\n  it is a way to grab something using react.\n  So you can create a const with a null initial value, as below:\n  const audioRef = useRef(null)\n  then we pass it as a prop in our <audio> element\n\n  The event callback, use audioRef.current (which is one of the key of the audio object) and\n  calls a pre-existing function on audio called play();\n  audioRef.current.play();\n */\n\n\n  // ####################################\n  // ERROR: CONTROLLED AND UNCONTROLLED\n  // ####################################\n\n  /* \n    error: a component is changing an uncontrolled input of index.js type range to be controlled.\n    Input elements should not switch from uncontrolled to controlled (or vice versa).\n\n    Uncontrolled means that our input value is not associated to a state, so when the data changes\n    associated to a state the input is still asociated to the input itself and not the react state \n    input. Once you associate the input value to the state, the component becomes controlled.\n\n    1. uncontrolled component: input that has nothing to do with a state\n    2. controlled component: value of the input is associated to  \n\n    we got the error because, that mess up with the states:\n    currentTime: 0,\n    duration: 0,\n\n    was set to null:\n    currentTime: null,\n    duration: null,\n  */\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { \n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from '@fortawesome/free-solid-svg-icons'\n\nconst Player = ({\n  isPlaying,\n  setisPlaying,\n  audioRef,\n  setsongInfo,\n  songInfo,\n  songs,\n  currentSong,\n  setcurrentSong,\n  setSongs,\n}) => {\n  // Ref,  it is moved to App. so we can use it to LibrarySong.js when you click the song there, it plays\n  // const audioRef = useRef(null);\n\n  // state I am gonna use only here: timing, moved to the app\n  /*\n    const [songInfo, setsongInfo] = useState({\n      currentTime: 0,\n      duration: 0,\n    });\n   */\n\n  /*\n    // REMOVED IT BECAUSE IT IS DOUBLE ON THE LIBRARYSONG\n    // UseEffect\n    // when you skip song also the library song gets updated\n    useEffect(() => {\n      const newSongs = songs.map((song) => {\n        if (currentSong.id === song.id) {\n          return {\n            ...song,\n            active: true,\n          };\n        } else {\n          return {\n            ...song,\n            active: false,\n          };\n        }\n      });\n      setSongs(newSongs);\n    }, [currentSong]);\n    // run this function all the time the current song is updated.\n    // basically when the current song changes, the status is active, and active status = hover LibrarySong\n */\n  const activeLibraryHandler = (nextPrev) => {\n    const newSongs = songs.map((song) => {\n      if (currentSong.id === nextPrev.id) {\n        return {\n        ...song,\n        active: true,\n        };\n      } else {\n        return {\n        ...song,\n        active: false,\n        };\n      }\n    });\n    setSongs(newSongs)\n  }\n  // Event Handlers\n  const playSongHandler = () => {\n    console.log(audioRef);\n    if (isPlaying) {\n      audioRef.current.pause();\n      setisPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setisPlaying(!isPlaying);\n    }\n  };\n\n  // this is connected to the onTimeUpdate event. Which let us update values in real time\n  // this is connected to onLoadedMetadata, when the pages loads the info updated\n  // moved to the App\n  /*   const timeUpdateHandler = (e) => {\n    // from this event we can extract: the current time we are in the song and also the song duration\n    console.log(e);\n    const currentTime = e.target.currentTime;\n    const duration = e.target.duration;\n    console.log(currentTime, duration);\n    setsongInfo({...songInfo, currentTime: currentTime, duration: duration })\n  } */\n\n  // onChange is the event for this callback to move the input range\n  const dragHandler = (e) => {\n    audioRef.current.currentTime = e.target.value;\n    console.log(e.target.value);\n    setsongInfo({ ...songInfo, currentTime: e.target.value });\n  };\n  // function for formatting the time, using a stackOverflow formatting\n  function formatTime(time) {\n    return (\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n    );\n  }\n\n  const skipTrackHandler = async (direction) => {\n    // get the index of the current song\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    // if the class is equal to skip-forward the change the current song, using index +1\n    // but to prevent the last song to skip to nothing we need to add the \"modules\" %\n    // if 8 % 8 is equal to 0, 0 will be our index, so it starts again from the beginning\n    /* \n      if 2 % 8 is equal to 2, 2 will be the index. \n      It's really supper easy to figure out the results of modulo when the first number is smaller. \n      The result is always equal the the first (smaller) number.\n      Because the second number is larger, it 'goes into' the first number zero times and the remainder \n      is the entirety of this first number.\n\n      if you wanna go back, and the index is 0 you cannot go index -1. Because index -1 does not exist.\n      so we need to make a ternary where if the current index is 0 you take the song.length -1\n      and get index 7. If you are not at current index 9 you can just go back currentIndex - 1\n      we need to return it either one of the two ifs and update the \n\n    */\n    if (direction === \"skip-forward\") {\n     await setcurrentSong(songs[(currentIndex + 1) % songs.length]);\n     activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\n    } else if (direction === \"skip-back\") {\n      await setcurrentSong(songs[currentIndex - 1] || songs[songs.length - 1]);\n      activeLibraryHandler(songs[currentIndex - 1] || songs[songs.length - 1]);\n    }\n    // this line waits for the songs to load before we can actually play them\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPertantage}%)`,\n  };\n  return (\n    <div className=\"player-container\">\n      <div className=\"time-control\">\n        <p style={{ width: \"4ch\", boxSizing: \"content-box\" }}>\n          {formatTime(songInfo.currentTime)}\n        </p>\n        <div\n          style={{\n            background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`,\n          }}\n          className=\"track\"\n        >\n          <input\n            type=\"range\"\n            value={songInfo.currentTime}\n            min={0}\n            max={songInfo.duration || 0}\n            onChange={dragHandler}\n          />\n          <div style={trackAnim} className=\"animate-track\"></div>\n        </div>\n        <p>\n          {songInfo.duration ? formatTime(songInfo.duration) : \"0:00\"}\n        </p>\n      </div>\n\n      <div className=\"player-control\">\n        <FontAwesomeIcon\n          onClick={() => skipTrackHandler(\"skip-back\")}\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Player;"]},"metadata":{},"sourceType":"module"}